# app.py
# -*- coding: utf-8 -*-
import os
import sqlite3
from datetime import datetime, date, timedelta
from io import BytesIO
from typing import Dict, Any, Optional, List, Tuple

import altair as alt
import pandas as pd
import streamlit as st

# ======================
# C·∫•u h√¨nh chung
# ======================
DB_PATH = "ward_tracker.db"
DATE_FMT = "%Y-%m-%d"
APP_PASSWORD = os.getenv("APP_PASSWORD", "")  # ƒë·ªÉ tr·ªëng th√¨ t·∫Øt password
st.set_page_config(page_title="B√°c sƒ© Tr·ª±c tuy·∫øn - Theo d√µi b·ªánh nh√¢n", layout="wide", page_icon="ü©∫")

# ======================
# CSS tinh g·ªçn giao di·ªán
# ======================
CUSTOM_CSS = """
<style>
.kpi {padding:16px;border-radius:16px;background:var(--background-color);box-shadow:0 2px 10px rgba(0,0,0,0.05);border:1px solid rgba(0,0,0,0.05)}
.kpi h3{margin:0;font-size:0.9rem;color:var(--text-color-secondary)}
.kpi .v{font-weight:700;font-size:1.6rem;margin-top:6px}
:root{--text-color-secondary:#6b7280;--background-color: rgba(255,255,255,0.6)}
[data-theme="dark"] :root{--text-color-secondary:#9ca3af;--background-color:rgba(255,255,255,0.04)}
.block-container {padding-top: 1.2rem; padding-bottom: 2rem;}
hr {margin: 0.6rem 0 1rem 0;}
.small {font-size: 0.9rem; color: var(--text-color-secondary);}
.badge {display:inline-block;padding:2px 8px;border-radius:999px;font-size:0.75rem;border:1px solid rgba(0,0,0,0.1)}
.badge.ok {background:#e8f5e9}
.badge.warn {background:#fff8e1}
.badge.danger {background:#ffebee}
</style>
"""
st.markdown(CUSTOM_CSS, unsafe_allow_html=True)

# ======================
# Danh m·ª•c c·∫≠n l√¢m s√†ng th∆∞·ªùng d√πng (m·∫∑c ƒë·ªãnh)
# ======================
COMMON_TESTS: List[Tuple[str, str]] = [
    ("XN m√°u", "T·ªïng ph√¢n t√≠ch t·∫ø b√†o m√°u"),
    ("XN m√°u", "Sinh ho√° c∆° b·∫£n"),
    ("XN m√°u", "ƒê√¥ng m√°u"),
    ("XN m√°u", "ƒê∆∞·ªùng huy·∫øt"),
    ("XN m√°u", "HbA1c"),
    ("X-quang", "X-quang ng·ª±c th·∫≥ng"),
    ("Si√™u √¢m", "Si√™u √¢m ·ªï b·ª•ng"),
    ("CT", "CT s·ªç n√£o kh√¥ng c·∫£n quang"),
    ("Kh√°c", "ƒêi·ªán tim"),
]

# ======================
# Helpers DB
# ======================
def get_conn() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def _column_exists(conn: sqlite3.Connection, table: str, col: str) -> bool:
    cur = conn.execute(f"PRAGMA table_info({table})")
    cols = [r[1] for r in cur.fetchall()]
    return col in cols

def init_db() -> None:
    with get_conn() as conn:
        c = conn.cursor()
        c.execute("""
        CREATE TABLE IF NOT EXISTS patients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            medical_id TEXT,
            name TEXT,
            dob TEXT,
            ward TEXT,
            bed TEXT,
            admission_date TEXT,
            discharge_date TEXT,
            severity INTEGER,
            surgery_needed INTEGER,
            planned_treatment_days INTEGER,
            meds TEXT,
            notes TEXT,
            active INTEGER DEFAULT 1
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            order_type TEXT,
            description TEXT,
            date_ordered TEXT,
            scheduled_date TEXT,
            status TEXT,
            result TEXT,
            result_date TEXT,
            FOREIGN KEY(patient_id) REFERENCES patients(id)
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS ward_rounds (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            visit_date TEXT,
            general_status TEXT,
            system_exam TEXT,
            plan TEXT,
            extra_tests TEXT,
            extra_tests_note TEXT,
            created_at TEXT,
            FOREIGN KEY(patient_id) REFERENCES patients(id)
        )""")
        conn.commit()

        # Migration an to√†n
        if not _column_exists(conn, "patients", "diagnosis"):
            try:
                conn.execute("ALTER TABLE patients ADD COLUMN diagnosis TEXT")
                conn.commit()
            except Exception:
                pass
        if not _column_exists(conn, "patients", "operated"):
            try:
                conn.execute("ALTER TABLE patients ADD COLUMN operated INTEGER DEFAULT 0")
                conn.commit()
            except Exception:
                pass

        # Clean nh·∫π (kh√¥ng b·∫Øt bu·ªôc)
        try:
            conn.execute("UPDATE patients SET severity=0 WHERE severity IS NULL")
            conn.commit()
        except Exception:
            pass

def _exec(query: str, params: tuple = ()) -> None:
    with get_conn() as conn:
        conn.execute(query, params)
        conn.commit()

def add_patient(patient: Dict[str, Any]) -> int:
    with get_conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO patients
            (medical_id, name, dob, ward, bed, admission_date, severity, surgery_needed,
             planned_treatment_days, meds, notes, active, diagnosis, operated)
            VALUES (?,?,?,?,?,?,?,?,?,?,?,1,?,?)
        """, (
            patient.get("medical_id"),
            patient.get("name"),
            patient.get("dob"),
            patient.get("ward"),
            patient.get("bed"),
            patient.get("admission_date"),
            patient.get("severity"),                 # c√≥ th·ªÉ l√† None -> v·∫´n OK
            1 if patient.get("surgery_needed") else 0,
            patient.get("planned_treatment_days"),
            patient.get("meds"),
            patient.get("notes"),
            patient.get("diagnosis"),
            1 if patient.get("operated") else 0,
        ))
        conn.commit()
        return int(cur.lastrowid)

def update_patient_operated(patient_id: int, operated: bool) -> None:
    _exec("UPDATE patients SET operated=? WHERE id=?", (1 if operated else 0, patient_id))

def add_order(order: Dict[str, Any]) -> None:
    _exec("""
    INSERT INTO orders
    (patient_id, order_type, description, date_ordered, scheduled_date, status)
    VALUES (?,?,?,?,?,?)
    """, (order["patient_id"], order["order_type"], order.get("description", ""),
          order.get("date_ordered"), order.get("scheduled_date"), order.get("status", "pending")))

def add_ward_round(rec: Dict[str, Any]) -> None:
    _exec("""
    INSERT INTO ward_rounds
    (patient_id, visit_date, general_status, system_exam, plan, extra_tests, extra_tests_note, created_at)
    VALUES (?,?,?,?,?,?,?,?)
    """, (
        rec["patient_id"], rec["visit_date"], rec.get("general_status",""),
        rec.get("system_exam",""), rec.get("plan",""),
        rec.get("extra_tests",""), rec.get("extra_tests_note",""),
        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ))

def mark_order_done(order_id: int, result_text: Optional[str] = None) -> None:
    now = date.today().strftime(DATE_FMT)
    _exec("UPDATE orders SET status='done', result=?, result_date=? WHERE id=?", (result_text, now, order_id))

def discharge_patient(patient_id: int) -> None:
    now = date.today().strftime(DATE_FMT)
    _exec("UPDATE patients SET discharge_date=?, active=0 WHERE id=?", (now, patient_id))

@st.cache_data(ttl=30, show_spinner=False)
def query_df(sql: str, params: tuple = ()) -> pd.DataFrame:
    with get_conn() as conn:
        return pd.read_sql_query(sql, conn, params=params)

# ======================
# Utilities
# ======================
def days_between(d1: Optional[str], d2: Optional[str] = None) -> Optional[int]:
    if not d1:
        return None
    d1d = datetime.strptime(d1, DATE_FMT).date()
    d2d = datetime.strptime(d2, DATE_FMT).date() if d2 else date.today()
    return (d2d - d1d).days

def calc_age(dob_str: Optional[str]) -> Optional[int]:
    if not dob_str:
        return None
    try:
        d = datetime.strptime(dob_str, DATE_FMT).date()
        today = date.today()
        return today.year - d.year - ((today.month, today.day) < (d.month, d.day))
    except Exception:
        return None

def export_excel(sheets: Dict[str, pd.DataFrame]) -> BytesIO:
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
        for name, df in sheets.items():
            df.to_excel(writer, sheet_name=name[:30], index=False)
    buffer.seek(0)
    return buffer

def safe_rerun():
    try:
        st.rerun()
    except Exception:
        st.rerun()

def load_sample_data():
    p1 = {"medical_id":"BN001","name":"Nguy·ªÖn A","dob":"1975-02-10","ward":"304","bed":"01",
          "admission_date":date.today().strftime(DATE_FMT),"severity":4,"surgery_needed":1,
          "planned_treatment_days":7,"meds":"Thu·ªëc A","notes":"Theo d√µi huy·∫øt √°p","diagnosis":"TƒÉng huy·∫øt √°p","operated":0}
    p2 = {"medical_id":"BN002","name":"Tr·∫ßn B","dob":"1965-06-15","ward":"305","bed":"02",
          "admission_date":(date.today()-timedelta(days=2)).strftime(DATE_FMT),"severity":2,
          "surgery_needed":0,"planned_treatment_days":3,"meds":"Thu·ªëc B","notes":"","diagnosis":"ƒêTƒê typ 2","operated":1}
    p3 = {"medical_id":"BN003","name":"L√™ C","dob":"1988-11-22","ward":"306","bed":"05",
          "admission_date":(date.today()-timedelta(days=6)).strftime(DATE_FMT),"severity":5,
          "surgery_needed":1,"planned_treatment_days":10,"meds":"Thu·ªëc C","notes":"Theo d√µi sau m·ªï","diagnosis":"Ch·∫•n th∆∞∆°ng s·ªç n√£o","operated":0}
    id1 = add_patient(p1); id2 = add_patient(p2); id3 = add_patient(p3)

    add_order({"patient_id":id1,"order_type":"CT","description":"CT n√£o",
               "date_ordered":date.today().strftime(DATE_FMT),
               "scheduled_date":(date.today()+timedelta(days=1)).strftime(DATE_FMT),
               "status":"scheduled"})
    add_order({"patient_id":id2,"order_type":"XN m√°u","description":"T·ªïng ph√¢n t√≠ch",
               "date_ordered":(date.today()-timedelta(days=1)).strftime(DATE_FMT),
               "scheduled_date":date.today().strftime(DATE_FMT),
               "status":"pending"})
    add_order({"patient_id":id3,"order_type":"Si√™u √¢m","description":"·ªî b·ª•ng",
               "date_ordered":date.today().strftime(DATE_FMT),
               "scheduled_date":(date.today()+timedelta(days=2)).strftime(DATE_FMT),
               "status":"scheduled"})

# ======================
# T√≠nh to√°n Dashboard (ƒë√£ b·ªè m·ªçi logic severity)
# ======================
def dashboard_stats(filters: Dict[str, Any]) -> Dict[str, Any]:
    base_active = "SELECT * FROM patients WHERE active=1"
    params = []
    if filters.get("ward") and filters["ward"] != "T·∫•t c·∫£":
        base_active += " AND ward=?"; params.append(filters["ward"])

    df_active = query_df(base_active, tuple(params))
    total_active = len(df_active)

    patients_per_ward = (
        df_active.groupby("ward").size().reset_index(name="S·ªë BN").sort_values("S·ªë BN", ascending=False)
        if total_active > 0 else pd.DataFrame(columns=["ward","S·ªë BN"])
    )

    if total_active > 0:
        df_active = df_active.copy()
        df_active["days_in_hospital"] = df_active["admission_date"].apply(lambda d: days_between(d))
        avg_days = round(df_active["days_in_hospital"].mean(), 1)
    else:
        avg_days = 0

    count_wait_surg = int(query_df(
        "SELECT COUNT(*) as c FROM patients WHERE active=1 AND surgery_needed=1"
    )["c"][0]) if total_active>=0 else 0

    df_orders = query_df("""
        SELECT o.*, p.name, p.ward FROM orders o
        LEFT JOIN patients p ON o.patient_id=p.id
    """)
    pending_patients = df_orders[df_orders["status"]!="done"]["patient_id"].nunique() if not df_orders.empty else 0
    today = date.today().strftime(DATE_FMT)
    scheduled_not_done = 0
    if not df_orders.empty:
        mask = (df_orders["status"]!="done") & (df_orders["scheduled_date"].notna()) & (df_orders["scheduled_date"]<=today)
        scheduled_not_done = int(mask.sum())

    return {
        "total_active": total_active,
        "patients_per_ward": patients_per_ward,
        "avg_days": avg_days,
        "count_wait_surg": count_wait_surg,
        "pending_patients": pending_patients,
        "scheduled_not_done": scheduled_not_done,
        "df_active": df_active,
        "df_orders": df_orders,
    }

# ======================
# Th√†nh ph·∫ßn UI nh·ªè (bi·ªÉu ƒë·ªì)
# ======================
def kpi(title: str, value: Any):
    st.markdown(f"""
        <div class="kpi">
            <h3>{title}</h3>
            <div class="v">{value}</div>
        </div>
    """, unsafe_allow_html=True)

def ward_bar_chart(df: pd.DataFrame):
    if df.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu BN theo ph√≤ng."); return
    chart = (
        alt.Chart(df.rename(columns={"ward":"Ph√≤ng"}))
        .mark_bar()
        .encode(x=alt.X("S·ªë BN:Q"), y=alt.Y("Ph√≤ng:N", sort="-x"),
                tooltip=["Ph√≤ng:N","S·ªë BN:Q"])
        .properties(height=300)
    )
    st.altair_chart(chart, use_container_width=True)

def orders_status_chart(df_orders: pd.DataFrame):
    if df_orders.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ch·ªâ ƒë·ªãnh."); return
    stat = df_orders.groupby("status").size().reset_index(name="S·ªë l∆∞·ª£ng")
    stat.rename(columns={"status":"Tr·∫°ng th√°i"}, inplace=True)
    chart = (
        alt.Chart(stat)
        .mark_bar()
        .encode(x=alt.X("Tr·∫°ng th√°i:N", sort="-y"), y="S·ªë l∆∞·ª£ng:Q",
                tooltip=["Tr·∫°ng th√°i:N","S·ªë l∆∞·ª£ng:Q"])
        .properties(height=300)
    )
    st.altair_chart(chart, use_container_width=True)

# ======================
# Kh·ªüi t·∫°o
# ======================
init_db()

# ======================
# B·∫£o v·ªá ƒë∆°n gi·∫£n b·∫±ng m·∫≠t kh·∫©u (tu·ª≥ ch·ªçn)
# ======================
if APP_PASSWORD:
    pw = st.sidebar.text_input("üîê M·∫≠t kh·∫©u ·ª©ng d·ª•ng", type="password")
    if pw != APP_PASSWORD:
        st.sidebar.warning("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p ·ª©ng d·ª•ng")
        st.stop()

# ======================
# Sidebar
# ======================
st.sidebar.title("ü©∫ Menu")
page = st.sidebar.radio(
    "Ch·ªçn trang",
    [
        "Trang ch·ªß",
        "Nh·∫≠p BN",
        "ƒêi bu·ªìng",
        "L·ªãch XN/Ch·ª•p",
        "T√¨m ki·∫øm & L·ªãch s·ª≠",
        "Ch·ªânh s·ª≠a BN",   # Trang s·ª≠a ri√™ng
        "B√°o c√°o",
        "C√†i ƒë·∫∑t / Demo",
    ],
    index=0
)

# ======================
# Trang ch·ªß
# ======================
if page == "Trang ch·ªß":
    st.title("üìä Dashboard ‚Äî Theo d√µi b·ªánh nh√¢n")

    df_all_wards = query_df("SELECT DISTINCT ward FROM patients WHERE ward IS NOT NULL AND ward<>'' ORDER BY ward")
    ward_list = ["T·∫•t c·∫£"] + (df_all_wards["ward"].tolist() if not df_all_wards.empty else [])
    f_col1, f_col2 = st.columns([1,2])
    with f_col1: ward_filter = st.selectbox("L·ªçc theo ph√≤ng", ward_list, index=0)
    with f_col2: st.markdown("<div class='small'>G·ª£i √Ω: d√πng b·ªô l·ªçc ƒë·ªÉ xem nhanh khoa/ph√≤ng.</div>", unsafe_allow_html=True)

    stats = dashboard_stats({"ward": ward_filter})

    c1, c2, c3, c4, c5 = st.columns(5)
    with c1: kpi("BN ƒëang ƒëi·ªÅu tr·ªã", stats["total_active"])
    with c2: kpi("Th·ªùi gian ƒëi·ªÅu tr·ªã TB (ng√†y)", stats["avg_days"])
    with c3: kpi("Ch·ªù m·ªï", stats["count_wait_surg"])
    with c4: kpi("BN c√≥ order ch∆∞a xong", stats["pending_patients"])
    with c5: kpi("Order qu√° h·∫°n / ƒë·∫øn h·∫°n", stats["scheduled_not_done"])
    st.markdown("---")

    st.subheader("BN theo ph√≤ng")
    ward_bar_chart(stats["patients_per_ward"])

    st.subheader("Tr·∫°ng th√°i ch·ªâ ƒë·ªãnh")
    orders_status_chart(stats["df_orders"])

    with st.expander("üìã Danh s√°ch BN (ƒëang ƒëi·ªÅu tr·ªã)", expanded=True):
        df_active = stats["df_active"]
        if df_active.empty:
            st.info("Kh√¥ng c√≥ b·ªánh nh√¢n ƒëang n·∫±m.")
        else:
            base_cols = ["id","medical_id","name","ward","bed","surgery_needed","admission_date","diagnosis","notes","operated"]
            view_cols = [c for c in base_cols if c in df_active.columns]
            st.dataframe(
                df_active[view_cols].rename(columns={
                    "medical_id":"M√£ BA","name":"H·ªç t√™n","ward":"Ph√≤ng","bed":"Gi∆∞·ªùng",
                    "surgery_needed":"C·∫ßn m·ªï","admission_date":"Ng√†y NV",
                    "diagnosis":"Ch·∫©n ƒëo√°n","notes":"Ghi ch√∫","operated":"ƒê√£ ph·∫´u thu·∫≠t"
                }), use_container_width=True, hide_index=True
            )
            for row in df_active.to_dict(orient="records"):
                cols = st.columns([1,3,1,1,1,1])
                cols[0].markdown(f"**{row['medical_id']}**")
                diag_txt = f"<br/><span class='small'>Ch·∫©n ƒëo√°n: {row.get('diagnosis','')}</span>" if row.get("diagnosis") else ""
                cols[1].markdown(f"**{row['name']}**  \n<span class='small'>{row.get('notes','')}</span>{diag_txt}", unsafe_allow_html=True)
                cols[2].markdown(f"{row.get('ward','')}/{row.get('bed','') or ''}")
                cols[3].markdown("üî™ C·∫ßn m·ªï" if row.get("surgery_needed")==1 else "")
                cols[4].markdown("‚úÖ" if row.get("operated")==1 else "‚úó")
                if cols[5].button("Xu·∫•t vi·ªán", key=f"dis_{row['id']}"):
                    discharge_patient(row["id"]); st.success(f"ƒê√£ xu·∫•t vi·ªán {row['name']}"); safe_rerun()

# ======================
# Nh·∫≠p BN
# ======================
elif page == "Nh·∫≠p BN":
    st.title("üßæ Nh·∫≠p b·ªánh nh√¢n m·ªõi")
    today_year = date.today().year

    with st.form("form_add_patient", clear_on_submit=True):
        c1, c2, c3 = st.columns([1,1,1])

        with c1:
            medical_id = st.text_input("M√£ b·ªánh √°n (kh√¥ng b·∫Øt bu·ªôc)")
            ward = st.text_input("Ph√≤ng")
            bed = st.text_input("Gi∆∞·ªùng")

        with c2:
            name = st.text_input("H·ªç t√™n *", value="")
            dob_year = st.number_input("NƒÉm sinh (∆∞u ti√™n nh·∫≠p nƒÉm)", min_value=1900, max_value=today_year, value=1980, step=1)
            st.caption(f"‚âà Tu·ªïi hi·ªán t·∫°i: **{today_year - int(dob_year)}**")

        with c3:
            use_age = st.checkbox("D√πng tu·ªïi ƒë·ªÉ quy ƒë·ªïi nƒÉm sinh (tu·ª≥ ch·ªçn)")
            dob_age = None
            if use_age:
                dob_age = st.number_input("Nh·∫≠p tu·ªïi hi·ªán t·∫°i", min_value=0, max_value=130, value=45, step=1)
                st.caption(f"‚áÑ Quy ƒë·ªïi nƒÉm sinh: **{today_year - int(dob_age)}**")

        with st.expander("Nh·∫≠p chi ti·∫øt ng√†y sinh (tu·ª≥ ch·ªçn)"):
            use_detail = st.checkbox("Nh·∫≠p chi ti·∫øt (ng√†y/th√°ng/nƒÉm)")
            dob_date = None
            if use_detail:
                try:
                    dob_date = st.date_input("Ch·ªçn ng√†y sinh chi ti·∫øt", value=date(1980,1,1), format="DD/MM/YYYY")
                except TypeError:
                    dob_date = st.date_input("Ch·ªçn ng√†y sinh chi ti·∫øt", value=date(1980,1,1))
                st.caption(f"ƒê√£ ch·ªçn: **{dob_date.strftime('%d/%m/%Y')}**")

        try:
            admission_date_ui = st.date_input("Ng√†y nh·∫≠p vi·ªán", value=date.today(), format="DD/MM/YYYY")
        except TypeError:
            admission_date_ui = st.date_input("Ng√†y nh·∫≠p vi·ªán", value=date.today())
            st.caption("M·∫πo: Nh·∫≠p theo dd/mm/yyyy. (Phi√™n b·∫£n Streamlit hi·ªán t·∫°i kh√¥ng h·ªó tr·ª£ format hi·ªÉn th·ªã)")

        # ---- Th√¥ng tin ƒëi·ªÅu tr·ªã ----
        planned_treatment_days = st.number_input("Th·ªùi gian ƒëi·ªÅu tr·ªã d·ª± ki·∫øn (ng√†y)", min_value=0, value=3)
        surgery_needed = st.checkbox("C·∫ßn ph·∫´u thu·∫≠t?")
        diagnosis = st.text_input("üìù Ch·∫©n ƒëo√°n b·ªánh", value="", placeholder="VD: Vi√™m ph·ªïi c·ªông ƒë·ªìng / ƒêTƒê typ 2...")
        operated = st.checkbox("ƒê√£ ph·∫´u thu·∫≠t (n·∫øu ƒë√£ m·ªï)")

        meds = st.text_area("Thu·ªëc ch√≠nh")
        notes = st.text_area("Ghi ch√∫")

        st.markdown("---")
        st.subheader("üß™ Ch·ªâ ƒë·ªãnh c·∫≠n l√¢m s√†ng ban ƒë·∫ßu (t√πy ch·ªçn)")

        options = [f"{t[0]} ‚Äî {t[1]}" for t in COMMON_TESTS]
        selected = st.multiselect("Ch·ªçn nhanh c√°c ch·ªâ ƒë·ªãnh c·∫ßn l√†m", options)
        try:
            scheduled_all = st.date_input("Ng√†y d·ª± ki·∫øn th·ª±c hi·ªán (√°p d·ª•ng cho t·∫•t c·∫£ m·ª•c ƒë√£ ch·ªçn)", value=date.today(), format="DD/MM/YYYY")
        except TypeError:
            scheduled_all = st.date_input("Ng√†y d·ª± ki·∫øn th·ª±c hi·ªán (√°p d·ª•ng cho t·∫•t c·∫£ m·ª•c ƒë√£ ch·ªçn)", value=date.today())

        submitted = st.form_submit_button("üíæ L∆∞u b·ªánh nh√¢n")
        if submitted:
            if use_detail and dob_date:
                dob_final = dob_date
            elif use_age and dob_age is not None:
                yr = max(1900, min(today_year, today_year - int(dob_age)))
                dob_final = date(yr, 1, 1)
            else:
                dob_final = date(int(dob_year), 1, 1)

            if not name:
                st.error("Vui l√≤ng nh·∫≠p t·ªëi thi·ªÉu H·ªç t√™n.")
            else:
                patient = {
                    "medical_id": medical_id.strip() if medical_id else None,
                    "name": name.strip(),
                    "dob": dob_final.strftime(DATE_FMT),
                    "ward": ward.strip(),
                    "bed": bed.strip(),
                    "admission_date": admission_date_ui.strftime(DATE_FMT),
                    "severity": None,                      # kh√¥ng d√πng n·ªØa
                    "surgery_needed": surgery_needed,
                    "planned_treatment_days": int(planned_treatment_days),
                    "meds": meds.strip(),
                    "notes": notes.strip(),
                    "diagnosis": diagnosis.strip(),
                    "operated": operated,
                }
                new_id = add_patient(patient)

                if selected:
                    today_str = date.today().strftime(DATE_FMT)
                    scheduled_str = scheduled_all.strftime(DATE_FMT)
                    text_to_tuple = {f"{t[0]} ‚Äî {t[1]}": t for t in COMMON_TESTS}
                    for sel in selected:
                        ot, desc = text_to_tuple[sel]
                        add_order({
                            "patient_id": new_id,
                            "order_type": ot,
                            "description": desc,
                            "date_ordered": today_str,
                            "scheduled_date": scheduled_str,
                            "status": "scheduled"
                        })

                st.success(
                    f"‚úÖ ƒê√£ th√™m BN ‚Ä¢ DOB: {dob_final.strftime('%d/%m/%Y')} ‚Ä¢ Nh·∫≠p vi·ªán: {admission_date_ui.strftime('%d/%m/%Y')}"
                    + (f" ‚Ä¢ ƒê√£ t·∫°o {len(selected)} ch·ªâ ƒë·ªãnh" if selected else "")
                )
                safe_rerun()

# ======================
# ƒêi bu·ªìng
# ======================
elif page == "ƒêi bu·ªìng":
    st.title("üö∂‚Äç‚ôÇÔ∏è ƒêi bu·ªìng (Ward round)")

    if "round_patient_id" not in st.session_state:
        st.session_state.round_patient_id = None

    wards_df = query_df("SELECT DISTINCT ward FROM patients WHERE active=1 AND ward IS NOT NULL AND ward<>'' ORDER BY ward")
    ward_options = wards_df["ward"].tolist() if not wards_df.empty else []
    sel_ward = st.selectbox("Ch·ªçn ph√≤ng", ward_options if ward_options else ["(Ch∆∞a c√≥ ph√≤ng)"])

    if ward_options:
        df_room = query_df("SELECT * FROM patients WHERE active=1 AND ward=? ORDER BY bed, name", (sel_ward,))
        if df_room.empty:
            st.info("Ph√≤ng n√†y ch∆∞a c√≥ BN ƒëang ƒëi·ªÅu tr·ªã.")
        else:
            st.subheader(f"üìã Danh s√°ch BN ph√≤ng {sel_ward}")
            table_rows = []
            for r in df_room.to_dict(orient="records"):
                age = calc_age(r.get("dob"))
                d_in = days_between(r.get("admission_date"))
                table_rows.append({
                    "M√£ BA": r["medical_id"],
                    "H·ªç t√™n": r["name"],
                    "Tu·ªïi": age if age is not None else "",
                    "Ch·∫©n ƒëo√°n": r.get("diagnosis","") or "",
                    "S·ªë ng√†y ƒëi·ªÅu tr·ªã": d_in if d_in is not None else "",
                    "ƒê√£ PT": "‚úÖ" if r.get("operated",0)==1 else "‚úó",
                    "Ghi ch√∫": r.get("notes","") or "",
                    "ID": r["id"],
                })
            df_view = pd.DataFrame(table_rows)
            st.dataframe(df_view.drop(columns=["ID"]), use_container_width=True, hide_index=True)

            st.markdown("### Kh√°m t·∫°i gi∆∞·ªùng")
            for r in df_room.to_dict(orient="records"):
                c = st.columns([3,1,1,1,2,1])
                age = calc_age(r.get("dob"))
                c[0].markdown(f"**{r['name']}** ‚Äî {r['medical_id']}  \n<span class='small'>Ch·∫©n ƒëo√°n: {r.get('diagnosis','')}</span>", unsafe_allow_html=True)
                c[1].markdown(f"Tu·ªïi: **{age if age is not None else ''}**")
                d_in = days_between(r.get("admission_date"))
                c[2].markdown(f"Ng√†y ƒëi·ªÅu tr·ªã: **{d_in if d_in is not None else ''}**")
                c[3].markdown("ƒê√£ PT: **‚úÖ**" if r.get("operated",0)==1 else "ƒê√£ PT: **‚úó**")
                c[4].markdown(f"<span class='small'>{r.get('notes','')}</span>", unsafe_allow_html=True)
                if c[5].button("Kh√°m", key=f"round_{r['id']}"):
                    st.session_state.round_patient_id = r["id"]
                    st.rerun()

    pid = st.session_state.round_patient_id
    if pid:
        st.markdown("---")
        info = query_df("SELECT * FROM patients WHERE id=?", (pid,))
        if info.empty:
            st.warning("Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n."); st.session_state.round_patient_id=None
        else:
            p = info.iloc[0].to_dict()
            st.subheader(f"üßë‚Äç‚öïÔ∏è Kh√°m BN: {p['name']} ({p['medical_id']}) ‚Äî Ph√≤ng {p.get('ward','')}, Gi∆∞·ªùng {p.get('bed','')}")

            with st.form("form_round"):
                colA, colB = st.columns([1,1])
                with colA:
                    visit_day = st.date_input("Ng√†y kh√°m", value=date.today())
                with colB:
                    operated_now = st.checkbox("ƒê√£ ph·∫´u thu·∫≠t", value=bool(p.get("operated",0)))
                general_status = st.text_area("T√¨nh tr·∫°ng to√†n th√¢n", height=100)
                system_exam = st.text_area("Kh√°m b·ªô ph·∫≠n", height=140)
                plan = st.text_area("Ph∆∞∆°ng √°n ƒëi·ªÅu tr·ªã ti·∫øp", height=120)

                st.markdown("#### üß™ CLS th√™m")
                extra_opts = [f"{t[0]} ‚Äî {t[1]}" for t in COMMON_TESTS]
                extra_selected = st.multiselect("Ch·ªçn CLS", extra_opts)
                extra_note = st.text_area("Di·ªÖn gi·∫£i CLS / L√Ω do", placeholder="VD: tƒÉng CRP, nghi nhi·ªÖm; ki·ªÉm tra HbA1c ƒë·ªÉ ƒë√°nh gi√° ki·ªÉm so√°t ƒë∆∞·ªùng m√°u‚Ä¶")
                try:
                    extra_scheduled = st.date_input("Ng√†y d·ª± ki·∫øn th·ª±c hi·ªán CLS", value=date.today(), format="DD/MM/YYYY")
                except TypeError:
                    extra_scheduled = st.date_input("Ng√†y d·ª± ki·∫øn th·ª±c hi·ªán CLS", value=date.today())

                b1, b2, _ = st.columns([1,1,2])
                save_round = b1.form_submit_button("üíæ L∆∞u kh√°m")
                close_round = b2.form_submit_button("ƒê√≥ng")

            if close_round:
                st.session_state.round_patient_id = None
                st.rerun()

            if save_round:
                update_patient_operated(pid, operated_now)

                round_rec = {
                    "patient_id": pid,
                    "visit_date": visit_day.strftime(DATE_FMT),
                    "general_status": general_status.strip(),
                    "system_exam": system_exam.strip(),
                    "plan": plan.strip(),
                    "extra_tests": ", ".join(extra_selected) if extra_selected else "",
                    "extra_tests_note": extra_note.strip(),
                }
                add_ward_round(round_rec)

                if extra_selected:
                    today_str = date.today().strftime(DATE_FMT)
                    sched_str = extra_scheduled.strftime(DATE_FMT)
                    text_to_tuple = {f"{t[0]} ‚Äî {t[1]}": t for t in COMMON_TESTS}
                    for sel in extra_selected:
                        ot, desc = text_to_tuple[sel]
                        desc_full = desc if not extra_note.strip() else f"{desc} ‚Äî {extra_note.strip()}"
                        add_order({
                            "patient_id": pid,
                            "order_type": ot,
                            "description": desc_full,
                            "date_ordered": today_str,
                            "scheduled_date": sched_str,
                            "status": "scheduled"
                        })

                st.success("‚úÖ ƒê√£ l∆∞u n·ªôi dung kh√°m ƒëi bu·ªìng")
                st.rerun()

            st.markdown("### üìÖ L·ªãch s·ª≠ kh√°m")
            hist_days = query_df("SELECT DISTINCT visit_date FROM ward_rounds WHERE patient_id=? ORDER BY visit_date DESC", (pid,))
            if hist_days.empty:
                st.info("Ch∆∞a c√≥ l·ªãch s·ª≠ ƒëi bu·ªìng.")
            else:
                day_strs = hist_days["visit_date"].tolist()
                sel_hist = st.selectbox("Ch·ªçn ng√†y ƒë·ªÉ xem l·∫°i", day_strs)
                hist = query_df("""
                    SELECT * FROM ward_rounds
                    WHERE patient_id=? AND visit_date=?
                    ORDER BY id DESC
                """, (pid, sel_hist))
                for _, r in hist.iterrows():
                    st.markdown(f"**L·∫ßn ghi #{r['id']} ‚Äî {r['visit_date']}**")
                    st.write("**T√¨nh tr·∫°ng to√†n th√¢n:**", r["general_status"] or "‚Äî")
                    st.write("**Kh√°m b·ªô ph·∫≠n:**", r["system_exam"] or "‚Äî")
                    st.write("**Ph∆∞∆°ng √°n ƒëi·ªÅu tr·ªã:**", r["plan"] or "‚Äî")
                    if r["extra_tests"]:
                        st.write("**CLS th√™m:**", r["extra_tests"])
                    if r["extra_tests_note"]:
                        st.write("**Di·ªÖn gi·∫£i CLS:**", r["extra_tests_note"])
                    st.caption(f"üïí T·∫°o l√∫c: {r['created_at']}")
                    st.markdown("---")

# ======================
# L·ªãch XN/Ch·ª•p
# ======================
elif page == "L·ªãch XN/Ch·ª•p":
    st.title("üß™ L·ªãch x√©t nghi·ªám & ch·ª•p chi·∫øu")

    df_orders = query_df("""
        SELECT o.*, p.name as patient_name, p.ward
        FROM orders o LEFT JOIN patients p ON o.patient_id=p.id
    """)
    if df_orders.empty:
        st.info("Ch∆∞a c√≥ ch·ªâ ƒë·ªãnh n√†o.")
    else:
        filter_choice = st.selectbox("Xem", ["H√¥m nay", "7 ng√†y t·ªõi", "T·∫•t c·∫£"], index=0)
        today_str = date.today().strftime(DATE_FMT)
        if filter_choice == "H√¥m nay":
            df_view = df_orders[df_orders["scheduled_date"]==today_str]
        elif filter_choice == "7 ng√†y t·ªõi":
            end = (date.today()+timedelta(days=7)).strftime(DATE_FMT)
            df_view = df_orders[(df_orders["scheduled_date"]>=today_str) & (df_orders["scheduled_date"]<=end)]
        else:
            df_view = df_orders.copy()

        for od in df_view.sort_values(["scheduled_date"]).to_dict(orient="records"):
            st.markdown(f"**{od['patient_name']}** ‚Äî {od['order_type']} ‚Äî {od.get('description','')}")
            st.caption(f"ƒê·∫∑t: {od.get('date_ordered')} | D·ª± ki·∫øn: {od.get('scheduled_date')} | Tr·∫°ng th√°i: {od.get('status')}")
            col1, col2 = st.columns([3,1])
            with col1:
                result_text = st.text_input(f"K·∫øt qu·∫£ (Order {od['id']})", key=f"res_{od['id']}")
            with col2:
                if st.button("ƒê√°nh d·∫•u ƒë√£ l√†m", key=f"done_{od['id']}"):
                    mark_order_done(od["id"], result_text)
                    st.success("‚úÖ ƒê√£ ƒë√°nh d·∫•u ho√†n th√†nh")
                    safe_rerun()
        st.dataframe(
            df_view[["id","patient_name","ward","order_type","description","date_ordered","scheduled_date","status","result_date"]],
            use_container_width=True, hide_index=True
        )

    st.subheader("Th√™m ch·ªâ ƒë·ªãnh m·ªõi")
    patients_df = query_df("SELECT id, medical_id, name, ward FROM patients WHERE active=1 ORDER BY ward, name")
    if not patients_df.empty:
        with st.form("form_add_order", clear_on_submit=True):
            pid = st.selectbox(
                "Ch·ªçn BN",
                options=patients_df["id"],
                format_func=lambda x: f"{patients_df[patients_df['id']==x]['medical_id'].values[0]} - {patients_df[patients_df['id']==x]['name'].values[0]} ({patients_df[patients_df['id']==x]['ward'].values[0]})"
            )
            custom_types = ["XN m√°u","X-quang","CT","Si√™u √¢m","Kh√°c"]
            order_type = st.selectbox("Lo·∫°i", sorted(set(custom_types + [t[0] for t in COMMON_TESTS])))
            desc = st.text_area("M√¥ t·∫£")
            scheduled = st.date_input("Ng√†y d·ª± ki·∫øn", value=date.today())
            submitted2 = st.form_submit_button("‚ûï Th√™m ch·ªâ ƒë·ªãnh")
            if submitted2:
                add_order({
                    "patient_id": int(pid),
                    "order_type": order_type,
                    "description": desc.strip(),
                    "date_ordered": date.today().strftime(DATE_FMT),
                    "scheduled_date": scheduled.strftime(DATE_FMT),
                    "status":"scheduled"
                })
                st.success("‚úÖ Th√™m ch·ªâ ƒë·ªãnh th√†nh c√¥ng")
                safe_rerun()
    else:
        st.info("Kh√¥ng c√≥ BN ƒëang ƒëi·ªÅu tr·ªã ƒë·ªÉ th√™m ch·ªâ ƒë·ªãnh.")

# ======================
# T√¨m ki·∫øm & L·ªãch s·ª≠ (ƒë√£ b·ªè m·ªçi ph·∫ßn severity)
# ======================
elif page == "T√¨m ki·∫øm & L·ªãch s·ª≠":
    st.title("üîé T√¨m ki·∫øm b·ªánh nh√¢n")
    q = st.text_input("T√¨m theo t√™n / m√£ b·ªánh √°n / ph√≤ng")
    if q:
        q_like = f"%{q.strip()}%"
        df = query_df("""
            SELECT * FROM patients
            WHERE medical_id LIKE ? OR name LIKE ? OR ward LIKE ?
            ORDER BY admission_date DESC
        """, (q_like, q_like, q_like))
        if df.empty:
            st.warning("Kh√¥ng t√¨m th·∫•y")
        else:
            for r in df.to_dict(orient="records"):
                st.subheader(f"{r['medical_id']} - {r['name']}")
                st.write(f"Ph√≤ng: {r.get('ward','')} | Gi∆∞·ªùng: {r.get('bed','')}")
                chandoan = r.get('diagnosis') or ''
                st.write(f"Ng√†y NV: {r.get('admission_date','')} | Ph·∫´u thu·∫≠t: {'C√≥' if r.get('surgery_needed',0)==1 else 'Kh√¥ng'} | ƒê√£ m·ªï: {'C√≥' if r.get('operated',0)==1 else 'Ch∆∞a'} | Active: {r['active']}")
                if chandoan:
                    st.write(f"üìù Ch·∫©n ƒëo√°n: {chandoan}")
                st.write("Ghi ch√∫:", r.get("notes",""))
                ords = query_df("SELECT * FROM orders WHERE patient_id=? ORDER BY scheduled_date DESC", (r["id"],))
                if not ords.empty:
                    st.table(ords[["order_type","description","scheduled_date","status","result_date"]])
                else:
                    st.write("Ch∆∞a c√≥ ch·ªâ ƒë·ªãnh.")

                col1, col2, col3 = st.columns([1, 1, 1])
                if col1.button("‚úèÔ∏è Ch·ªânh s·ª≠a", key=f"edit_{r['id']}"):
                    st.session_state.edit_patient_id = r['id']
                    st.experimental_rerun()

                if col2.button("üóëÔ∏è X√≥a", key=f"delete_{r['id']}"):
                    _exec("DELETE FROM patients WHERE id=?", (r['id'],))
                    st.success(f"ƒê√£ x√≥a b·ªánh nh√¢n {r['name']}")
                    st.experimental_rerun()

                if col3.button("Xu·∫•t vi·ªán", key=f"dis2_{r['id']}"):
                    discharge_patient(r["id"])
                    st.success("‚úÖ ƒê√£ xu·∫•t vi·ªán")
                    safe_rerun()

    # Form ch·ªânh s·ª≠a th√¥ng tin b·ªánh nh√¢n (r√∫t g·ªçn, kh√¥ng c√≤n severity)
    if "edit_patient_id" in st.session_state:
        patient_id = st.session_state.edit_patient_id
        patient_info = query_df("SELECT * FROM patients WHERE id=?", (patient_id,)).iloc[0].to_dict()

        st.subheader(f"Ch·ªânh s·ª≠a th√¥ng tin b·ªánh nh√¢n: {patient_info['name']}")

        with st.form("form_edit_patient"):
            name = st.text_input("H·ªç t√™n", value=patient_info['name'])
            ward = st.text_input("Ph√≤ng", value=patient_info['ward'])
            bed = st.text_input("Gi∆∞·ªùng", value=patient_info['bed'])
            admission_date = st.date_input("Ng√†y nh·∫≠p vi·ªán", value=datetime.strptime(patient_info['admission_date'], DATE_FMT).date())
            discharge_date = st.date_input("Ng√†y xu·∫•t vi·ªán", value=datetime.strptime(patient_info['discharge_date'], DATE_FMT).date() if patient_info['discharge_date'] else date.today())
            diagnosis = st.text_input("Ch·∫©n ƒëo√°n", value=patient_info['diagnosis'])
            notes = st.text_area("Ghi ch√∫", value=patient_info['notes'])
            submitted_edit = st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi")

        if submitted_edit:
            _exec(
                "UPDATE patients SET name=?, ward=?, bed=?, admission_date=?, discharge_date=?, diagnosis=?, notes=? WHERE id=?",
                (name, ward, bed, admission_date.strftime(DATE_FMT), discharge_date.strftime(DATE_FMT) if discharge_date else None, diagnosis, notes, patient_id)
            )
            st.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng.")
            del st.session_state.edit_patient_id
            st.experimental_rerun()

# ======================
# Ch·ªânh s·ª≠a BN (trang ri√™ng, c≈©ng ƒë√£ b·ªè severity)
# ======================
elif page == "Ch·ªânh s·ª≠a BN":
    st.title("‚úèÔ∏è Ch·ªânh s·ª≠a b·ªánh nh√¢n")

    show_only_active = st.checkbox("Ch·ªâ hi·ªÉn th·ªã BN ƒëang ƒëi·ªÅu tr·ªã (active=1)", value=True)
    name_query = st.text_input("T√¨m theo t√™n/m√£ b·ªánh √°n (g√µ ƒë·ªÉ l·ªçc nhanh)")

    if show_only_active:
        df_pat = query_df("SELECT id, medical_id, name, ward FROM patients WHERE active=1 ORDER BY ward, name")
    else:
        df_pat = query_df("SELECT id, medical_id, name, ward FROM patients ORDER BY active DESC, ward, name")

    if not df_pat.empty and name_query:
        q = f"%{name_query.strip()}%"
        df_pat = query_df(
            """
            SELECT id, medical_id, name, ward FROM patients
            WHERE (medical_id LIKE ? OR name LIKE ?) AND (? = 1 OR active = 1)
            ORDER BY ward, name
            """,
            (q, q, 1 if show_only_active else 0)
        )

    if df_pat.empty:
        st.info("Ch∆∞a c√≥ b·ªánh nh√¢n ph√π h·ª£p ƒë·ªÉ ch·ªânh s·ª≠a.")
        st.stop()

    pid = st.selectbox(
        "Ch·ªçn b·ªánh nh√¢n",
        options=df_pat["id"].tolist(),
        format_func=lambda x: f"{df_pat[df_pat['id']==x]['medical_id'].values[0] or '‚Äî'} - {df_pat[df_pat['id']==x]['name'].values[0]} (Ph√≤ng {df_pat[df_pat['id']==x]['ward'].values[0] or '‚Äî'})"
    )

    info_df = query_df("SELECT * FROM patients WHERE id=?", (int(pid),))
    if info_df.empty:
        st.error("Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n.")
        st.stop()
    p = info_df.iloc[0].to_dict()

    st.markdown("---")
    st.subheader(f"ƒêang ch·ªânh s·ª≠a: **{p.get('medical_id') or '‚Äî'} ‚Äî {p.get('name', '')}**")

    def _safe_date(s: Optional[str], fallback: date) -> date:
        try:
            return datetime.strptime(s, DATE_FMT).date() if s else fallback
        except Exception:
            return fallback

    admission_default  = _safe_date(p.get("admission_date"), date.today())
    discharge_default  = _safe_date(p.get("discharge_date"), date.today()) if p.get("discharge_date") else None

    with st.form("form_edit_patient_full"):
        col1, col2, col3 = st.columns(3)
        with col1:
            medical_id = st.text_input("M√£ b·ªánh √°n", value=p.get("medical_id") or "")
            name       = st.text_input("H·ªç t√™n *", value=p.get("name") or "")
        with col2:
            ward       = st.text_input("Ph√≤ng", value=p.get("ward") or "")
            bed        = st.text_input("Gi∆∞·ªùng", value=p.get("bed") or "")
        with col3:
            surgery_needed = st.checkbox("C·∫ßn ph·∫´u thu·∫≠t?", value=bool(p.get("surgery_needed",0)))
            operated       = st.checkbox("ƒê√£ ph·∫´u thu·∫≠t", value=bool(p.get("operated",0)))

        try:
            admission_date = st.date_input("Ng√†y nh·∫≠p vi·ªán", value=admission_default, format="DD/MM/YYYY")
        except TypeError:
            admission_date = st.date_input("Ng√†y nh·∫≠p vi·ªán", value=admission_default)

        discharge_enable = st.checkbox("C√≥ ng√†y xu·∫•t vi·ªán?", value=bool(discharge_default))
        if discharge_enable:
            try:
                discharge_date = st.date_input("Ng√†y xu·∫•t vi·ªán", value=discharge_default or date.today(), format="DD/MM/YYYY")
            except TypeError:
                discharge_date = st.date_input("Ng√†y xu·∫•t vi·ªán", value=discharge_default or date.today())
        else:
            discharge_date = None

        diagnosis = st.text_input("üìù Ch·∫©n ƒëo√°n", value=p.get("diagnosis") or "")
        notes     = st.text_area("Ghi ch√∫", value=p.get("notes") or "")

        c_save, c_dis, c_del = st.columns([1,1,1])
        submitted = c_save.form_submit_button("üíæ L∆∞u thay ƒë·ªïi")
        do_discharge = c_dis.form_submit_button("üèÅ Xu·∫•t vi·ªán (set active=0)")
        do_delete = c_del.form_submit_button("üóëÔ∏è Xo√° b·ªánh nh√¢n")

    if submitted:
        if not name.strip():
            st.error("Vui l√≤ng nh·∫≠p H·ªç t√™n."); st.stop()
        _exec(
            """
            UPDATE patients
            SET medical_id=?, name=?, ward=?, bed=?,
                admission_date=?, discharge_date=?,
                surgery_needed=?, operated=?,
                diagnosis=?, notes=?
            WHERE id=?
            """,
            (
                medical_id.strip() or None,
                name.strip(),
                ward.strip(),
                bed.strip(),
                admission_date.strftime(DATE_FMT),
                discharge_date.strftime(DATE_FMT) if discharge_date else None,
                1 if surgery_needed else 0,
                1 if operated else 0,
                diagnosis.strip(),
                notes.strip(),
                int(pid),
            )
)
        st.success("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi.")
        st.experimental_rerun()

    if do_discharge:
        discharge_patient(int(pid))
        st.success("‚úÖ ƒê√£ xu·∫•t vi·ªán.")
        st.experimental_rerun()

    if do_delete:
        _exec("DELETE FROM patients WHERE id=?", (int(pid),))
        st.success("üóëÔ∏è ƒê√£ xo√° b·ªánh nh√¢n.")
        st.experimental_rerun()

# ======================
# B√°o c√°o
# ======================
elif page == "B√°o c√°o":
    st.title("üìë B√°o c√°o")

    st.subheader("B√°o c√°o nhanh theo ng√†y")
    day = st.date_input("Ch·ªçn ng√†y b√°o c√°o", value=date.today())
    dstr = day.strftime(DATE_FMT)
    patients_on_day = query_df("""
        SELECT * FROM patients
        WHERE admission_date <= ? AND (discharge_date IS NULL OR discharge_date >= ?)
    """, (dstr, dstr))
    orders_day = query_df("""
        SELECT o.*, p.name FROM orders o
        LEFT JOIN patients p ON o.patient_id=p.id
        WHERE o.scheduled_date = ?
    """, (dstr,))
    st.write(f"BN c√≥ m·∫∑t ng√†y {dstr}: **{len(patients_on_day)}**")
    st.write(f"Ch·ªâ ƒë·ªãnh scheduled cho ng√†y {dstr}: **{len(orders_day)}**")
    st.dataframe(orders_day[["patient_id","name","order_type","description","status"]], use_container_width=True, hide_index=True)

    if st.button("‚¨áÔ∏è Xu·∫•t b√°o c√°o ng√†y (Excel)"):
        xls = export_excel({"patients_on_day": patients_on_day, "orders_day": orders_day})
        st.download_button("T·∫£i file b√°o c√°o ng√†y", data=xls.getvalue(),
                           file_name=f"report_{dstr}.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    st.markdown("---")
    st.subheader("B√°o c√°o th√°ng")
    ym = st.date_input("Ch·ªçn ng√†y thu·ªôc th√°ng mu·ªën b√°o c√°o", value=date.today())
    first = date(ym.year, ym.month, 1).strftime(DATE_FMT)
    next_month = ym.replace(day=28) + timedelta(days=4)
    last_day = (next_month - timedelta(days=next_month.day)).strftime(DATE_FMT)
    patients_month = query_df("SELECT * FROM patients WHERE admission_date BETWEEN ? AND ?", (first, last_day))
    st.write(f"T·ªïng BN nh·∫≠p trong th√°ng {ym.month}/{ym.year}: **{len(patients_month)}**")
    if st.button("‚¨áÔ∏è Xu·∫•t b√°o c√°o th√°ng (Excel)"):
        xls = export_excel({"patients_month": patients_month})
        st.download_button("T·∫£i file b√°o c√°o th√°ng", data=xls.getvalue(),
                           file_name=f"report_month_{ym.year}_{ym.month}.xlsx",
                           mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# ======================
# C√†i ƒë·∫∑t / Demo
# ======================
elif page == "C√†i ƒë·∫∑t / Demo":
    st.title("‚öôÔ∏è C√†i ƒë·∫∑t & Demo")
    st.write("- Ch·∫°y ·ª©ng d·ª•ng: `streamlit run app.py --server.address 0.0.0.0 --server.port 8501`")
    st.write("- B·∫≠t m·∫≠t kh·∫©u: `export APP_PASSWORD=yourpass` (Linux/Mac) ho·∫∑c `set APP_PASSWORD=yourpass` (Windows)")
    st.write("- File c∆° s·ªü d·ªØ li·ªáu:", DB_PATH)

    c1, c2 = st.columns(2)
    with c1:
        if st.button("T·∫°o d·ªØ li·ªáu m·∫´u (demo)"):
            load_sample_data()
            st.success("‚úÖ ƒê√£ th√™m sample data")
            safe_rerun()
    with c2:
        if st.button("T·∫°o backup ngay (t·∫£i file .db)"):
            if not os.path.exists(DB_PATH):
                st.error("Ch∆∞a c√≥ DB ƒë·ªÉ t·∫£i.")
            else:
                with open(DB_PATH, "rb") as f:
                    data = f.read()
                st.download_button("T·∫£i file DB", data=data, file_name=DB_PATH, mime="application/x-sqlite3")
